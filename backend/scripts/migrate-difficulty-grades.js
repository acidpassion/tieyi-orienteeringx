const mongoose = require('mongoose');
const Configuration = require('../models/Configuration');
require('dotenv').config();

// Color mapping from hex codes to Chinese names
const colorMapping = {
  '#BBF451': 'ÊµÖÁªøËâ≤',
  '#FFFFFF': 'ÁôΩËâ≤',
  '#FFF085': 'ÊµÖÈªÑËâ≤',
  '#FFB93B': 'Ê©ôËâ≤',
  '#FF6467': 'Á∫¢Ëâ≤',
  '#8207DB': 'Á¥´Ëâ≤',
  '#2B7FFF': 'ËìùËâ≤',
  '#000000': 'ÈªëËâ≤',
  '#3B82F6': 'ËìùËâ≤',
  '#EF4444': 'Á∫¢Ëâ≤',
  '#10B981': 'ÁªøËâ≤',
  '#F59E0B': 'ÈªÑËâ≤',
  '#8B5CF6': 'Á¥´Ëâ≤',
  '#EC4899': 'Á≤âËâ≤',
  '#06B6D4': 'ÈùíËâ≤',
  '#84CC16': 'ÈùíÁªøËâ≤',
  '#F97316': 'Ê©ôÁ∫¢Ëâ≤',
  '#6366F1': 'ÈùõËìùËâ≤'
};

async function migrateDifficultyGrades() {
  try {
    console.log('üîó Connecting to MongoDB...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');

    const config = await Configuration.getSingleton();
    console.log(`üìä Found configuration with ${config.difficultyGrades.length} difficulty grades`);

    let migrationNeeded = false;
    const updatedGrades = config.difficultyGrades.map((grade, index) => {
      // Check if this grade needs migration (has old 'color' field but no 'colorCode')
      if (grade.color && !grade.colorCode) {
        console.log(`üîÑ Migrating grade ${index + 1}: ${grade.level}`);
        console.log(`   Old color field: ${grade.color}`);
        
        // If the color field contains a hex code, migrate it
        if (/^#[0-9A-F]{6}$/i.test(grade.color)) {
          const hexCode = grade.color;
          const colorName = colorMapping[hexCode] || 'Êú™Áü•È¢úËâ≤';
          
          console.log(`   ‚úÖ Migrating hex code ${hexCode} to colorCode`);
          console.log(`   ‚úÖ Setting color name to: ${colorName}`);
          
          migrationNeeded = true;
          return {
            ...grade.toObject(),
            colorCode: hexCode,
            color: colorName
          };
        } else {
          // If color field contains a name, keep it and set a default colorCode
          console.log(`   ‚úÖ Keeping color name: ${grade.color}`);
          console.log(`   ‚úÖ Setting default colorCode: #3B82F6`);
          
          migrationNeeded = true;
          return {
            ...grade.toObject(),
            colorCode: '#3B82F6',
            color: grade.color
          };
        }
      } else if (grade.colorCode && grade.color) {
        console.log(`‚úÖ Grade ${index + 1} already migrated: ${grade.level}`);
        return grade.toObject();
      } else {
        console.log(`‚ö†Ô∏è  Grade ${index + 1} has incomplete data: ${grade.level}`);
        migrationNeeded = true;
        return {
          ...grade.toObject(),
          colorCode: grade.colorCode || grade.color || '#3B82F6',
          color: grade.color || 'Êú™Áü•È¢úËâ≤'
        };
      }
    });

    if (migrationNeeded) {
      console.log('\nüíæ Saving migrated configuration...');
      config.difficultyGrades = updatedGrades;
      await config.save();
      console.log('‚úÖ Migration completed successfully!');
      
      console.log('\nüìã Migration Summary:');
      updatedGrades.forEach((grade, index) => {
        console.log(`   ${index + 1}. ${grade.level}: ${grade.color} (${grade.colorCode})`);
      });
    } else {
      console.log('‚úÖ No migration needed - all grades already have both colorCode and color fields');
    }

  } catch (error) {
    console.error('‚ùå Migration failed:', error.message);
    console.error(error.stack);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Database connection closed');
  }
}

// Run the migration
if (require.main === module) {
  migrateDifficultyGrades();
}

module.exports = { migrateDifficultyGrades };